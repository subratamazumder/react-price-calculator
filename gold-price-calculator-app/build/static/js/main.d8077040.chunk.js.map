{"version":3,"sources":["components/gold-price-calculator.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["GoldPriceCalculator","props","console","log","handleInputChange","event","target","value","name","setState","handleInputChangeWeight","totalMakingCharge","state","makingCharges","totalDiscount","mcDiscountPrct","totalGoldPrice","goldPriceRt","totalPrice","parseFloat","totalOtherCharges","totalGST","totalPriceWGST","toFixed","handleInputChangeOtherCharges","handleSubmit","weight","bind","Container","Row","Col","sm","Form","Group","controlId","Label","Control","required","type","placeholder","this","onChange","autoFocus","readOnly","className","Button","variant","onClick","React","Component","Header","Jumbotron","fluid","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oVA8PeA,E,YA1Pb,WAAYC,GAAQ,IAAD,6BACjBC,QAAQC,IAAI,qCACZ,4CAAMF,KAkBRG,kBAAoB,SAAAC,GAClB,IAAMC,EAASD,EAAMC,OACfC,EAAQD,EAAOC,MACfC,EAAOF,EAAOE,KACpB,EAAKC,SAAL,eACGD,EAAOD,KAzBO,EA4BnBG,wBAA0B,SAAAL,GACxB,IAAMC,EAASD,EAAMC,OACfC,EAAQD,EAAOC,MACfC,EAAOF,EAAOE,KACpB,GAAGD,EAAQ,EAAG,CAAC,IAAD,EACNI,EAAoBJ,EAAO,EAAKK,MAAMC,cACtCC,GACFP,EAAQ,EAAKK,MAAMC,cAAgB,EAAKD,MAAMG,eAAkB,IAC9DC,EAAiBT,EAAQ,EAAKK,MAAMK,YACpCC,EAAaF,EAAiBL,EAAmBG,EAAeK,WAAW,EAAKP,MAAMQ,mBACtFC,EAAsB,IAAXH,EACXI,EAAiBJ,EAAaG,EACpC,EAAKZ,UAAL,mBACGD,EAAOD,GADV,8BAEiBO,EAAcS,QAAQ,IAFvC,kCAGqBZ,EAAkBY,QAAQ,IAH/C,2BAIcL,EAAWK,QAAQ,IAJjC,+BAKkBP,EAAeO,QAAQ,IALzC,yBAMYF,EAASE,QAAQ,IAN7B,+BAOmBD,EAAeC,QAAQ,IAP1C,SAUA,EAAKd,SAAL,eACGD,EAAOD,KAnDK,EAuDnBiB,8BAAgC,SAAAnB,GAC9B,IAAMC,EAASD,EAAMC,OACfC,EAAQD,EAAOC,MACfC,EAAOF,EAAOE,KACpB,GAAGD,EAAQ,EAAG,CAAC,IAAD,EACNW,EAAaC,WAAW,EAAKP,MAAMM,YAAYC,WAAWZ,GAC1Dc,EAAsB,IAAXH,EACXI,EAAiBJ,EAAaG,EACpC,EAAKZ,UAAL,mBACGD,EAAOD,GADV,2BAEcW,EAAWK,QAAQ,IAFjC,yBAGYF,EAASE,QAAQ,IAH7B,+BAImBD,EAAeC,QAAQ,IAJ1C,SAOA,EAAKd,SAAL,eACGD,EAAOD,KAvEK,EA2EnBkB,aAAe,SAAApB,GACb,EAAKI,SAAS,CACZQ,YAAa,KACbS,OAAQ,GACRb,cAAe,IACfE,eAAgB,EAChBD,cAAe,EACfH,kBAAmB,EACnBO,WAAY,EACZF,eAAgB,EAChBK,SAAS,EACTC,eAAe,EACfF,kBAAkB,OApFpB,EAAKR,MAAQ,CACXK,YAAa,KACbS,OAAQ,GACRb,cAAe,IACfE,eAAgB,EAChBD,cAAe,EACfH,kBAAmB,EACnBO,WAAY,EACZF,eAAgB,EAChBK,SAAU,EACVC,eAAe,EACfF,kBAAkB,KAEpB,EAAKhB,kBAAoB,EAAKA,kBAAkBuB,KAAvB,gBACzB,EAAKF,aAAe,EAAKA,aAAaE,KAAlB,gBAjBH,E,sEA2FjB,OACE,6BACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,IAAE,GAEH,kBAACC,EAAA,EAAKC,MAAN,CAAYC,UAAU,sBACpB,kBAACF,EAAA,EAAKG,MAAN,2BACA,kBAACH,EAAA,EAAKI,QAAN,CACEC,UAAQ,EACRC,KAAK,SACLC,YAAY,2BACZ/B,KAAK,cACLD,MAAOiC,KAAK5B,MAAMK,YAClBwB,SAAUD,KAAKpC,qBAGnB,kBAAC4B,EAAA,EAAKC,MAAN,CAAYC,UAAU,0BACpB,kBAACF,EAAA,EAAKG,MAAN,yCACA,kBAACH,EAAA,EAAKI,QAAN,CACEC,UAAQ,EACRC,KAAK,SACLC,YAAY,sBACZ/B,KAAK,gBACLD,MAAOiC,KAAK5B,MAAMC,cAClB4B,SAAUD,KAAKpC,qBAGnB,kBAAC4B,EAAA,EAAKC,MAAN,CAAYC,UAAU,mBACpB,kBAACF,EAAA,EAAKG,MAAN,2BACA,kBAACH,EAAA,EAAKI,QAAN,CACEC,UAAQ,EACRC,KAAK,SACLC,YAAY,sBACZ/B,KAAK,oBACLD,MAAOiC,KAAK5B,MAAMQ,kBAClBqB,SAAUD,KAAKpC,qBAGnB,kBAAC4B,EAAA,EAAKC,MAAN,CAAYC,UAAU,mBACpB,kBAACF,EAAA,EAAKG,MAAN,uBACA,kBAACH,EAAA,EAAKI,QAAN,CACEC,UAAQ,EACRC,KAAK,SACLC,YAAY,mCACZG,WAAS,EACTlC,KAAK,SACLD,MAAOiC,KAAK5B,MAAMc,OAClBe,SAAUD,KAAK9B,2BAKnB,kBAACsB,EAAA,EAAKC,MAAN,CAAYC,UAAU,0BACpB,kBAACF,EAAA,EAAKG,MAAN,2BACA,kBAACH,EAAA,EAAKI,QAAN,CACEC,UAAQ,EACRC,KAAK,SACLC,YAAY,iBACZ/B,KAAK,iBACLD,MAAOiC,KAAK5B,MAAMG,eAClB0B,SAAUD,KAAKpC,qBAInB,kBAAC4B,EAAA,EAAKC,MAAN,CAAYC,UAAU,0BACpB,kBAACF,EAAA,EAAKG,MAAN,0BAA+BK,KAAK5B,MAAMK,YAA1C,MAA0DuB,KAAK5B,MAAMc,OAArE,KACA,kBAACM,EAAA,EAAKI,QAAN,CACAO,UAAQ,EACNN,UAAQ,EACRC,KAAK,SACLC,YAAY,iBACZ/B,KAAK,iBACLD,MAAOiC,KAAK5B,MAAMI,eAClByB,SAAUD,KAAKpC,qBAGnB,kBAAC4B,EAAA,EAAKC,MAAN,CAAYC,UAAU,0BACpB,kBAACF,EAAA,EAAKG,MAAN,wBAA6BK,KAAK5B,MAAMC,cAAxC,MAA0D2B,KAAK5B,MAAMc,OAArE,KACA,kBAACM,EAAA,EAAKI,QAAN,CACAO,UAAQ,EACNN,UAAQ,EACRC,KAAK,SACLC,YAAY,iBACZ/B,KAAK,oBACLD,MAAOiC,KAAK5B,MAAMD,kBAClB8B,SAAUD,KAAKpC,qBAGnB,kBAAC4B,EAAA,EAAKC,MAAN,CAAYC,UAAU,0BACpB,kBAACF,EAAA,EAAKG,MAAN,wBAA6BK,KAAK5B,MAAMG,eAAxC,SAA8DyB,KAAK5B,MAAMD,kBAAzE,KACA,kBAACqB,EAAA,EAAKI,QAAN,CACAO,UAAQ,EACNN,UAAQ,EACRC,KAAK,SACLC,YAAY,iBACZ/B,KAAK,gBACLD,MAAOiC,KAAK5B,MAAME,cAClB2B,SAAUD,KAAKpC,qBAInB,kBAAC4B,EAAA,EAAKC,MAAN,CAAYC,UAAU,0BACpB,kBAACF,EAAA,EAAKG,MAAN,qBACA,kBAACH,EAAA,EAAKI,QAAN,CACAO,UAAQ,EACNN,UAAQ,EACRC,KAAK,SACLC,YAAY,iBACZ/B,KAAK,aACLD,MAAOiC,KAAK5B,MAAMM,WAClBuB,SAAUD,KAAKpC,qBAInB,kBAAC4B,EAAA,EAAKC,MAAN,CAAYC,UAAU,0BACpB,kBAACF,EAAA,EAAKG,MAAN,iBACA,kBAACH,EAAA,EAAKI,QAAN,CACAO,UAAQ,EACNN,UAAQ,EACRC,KAAK,SACLC,YAAY,iBACZ/B,KAAK,WACLD,MAAOiC,KAAK5B,MAAMS,SAClBoB,SAAUD,KAAKpC,qBAInB,kBAAC4B,EAAA,EAAKC,MAAN,CAAYC,UAAU,0BACpB,kBAACF,EAAA,EAAKG,MAAN,6BACA,kBAACH,EAAA,EAAKI,QAAN,CACAO,UAAQ,EACNN,UAAQ,EACRC,KAAK,SACLC,YAAY,iBACZ/B,KAAK,iBACLD,MAAOiC,KAAK5B,MAAMU,eAClBmB,SAAUD,KAAKpC,qBAInB,yBAAKwC,UAAU,eACb,kBAACC,EAAA,EAAD,CACEC,QAAQ,UACRR,KAAK,SACLM,UAAU,mBACVG,QAASP,KAAKf,cAJhB,kB,GA1OgBuB,IAAMC,W,OCazBC,MAbf,WACE,OACE,yBAAKN,UAAU,0BACb,kBAACO,EAAA,EAAD,CAAWC,OAAK,EAACR,UAAU,WACzB,kBAAChB,EAAA,EAAD,KACE,yD,MCQKyB,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d8077040.chunk.js","sourcesContent":["import React from \"react\";\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\n\nclass GoldPriceCalculator extends React.Component {\n  constructor(props) {\n    console.log(\"GoldPriceCalculator constructing\");\n    super(props);\n    this.state = {\n      goldPriceRt: 3770.0,\n      weight: '',\n      makingCharges: 450.0,\n      mcDiscountPrct: 0.0,\n      totalDiscount: 0.0,\n      totalMakingCharge: 0.0,\n      totalPrice: 0.0,\n      totalGoldPrice: 0.0,\n      totalGST: 0.0,\n      totalPriceWGST:0.0,\n      totalOtherCharges:100.0\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleInputChange = event => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  };\n  handleInputChangeWeight = event => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    if(value > 0) {\n      const totalMakingCharge = value *this.state.makingCharges;\n      const totalDiscount =\n        -(value * this.state.makingCharges * this.state.mcDiscountPrct) / 100;\n      const totalGoldPrice = value * this.state.goldPriceRt;\n      const totalPrice = totalGoldPrice + totalMakingCharge+ totalDiscount +parseFloat(this.state.totalOtherCharges);\n      const totalGST = totalPrice*0.03;\n      const totalPriceWGST = totalPrice + totalGST;\n      this.setState({\n        [name]: value,\n        totalDiscount: totalDiscount.toFixed(2),\n        totalMakingCharge: totalMakingCharge.toFixed(2),\n        totalPrice: totalPrice.toFixed(2),\n        totalGoldPrice: totalGoldPrice.toFixed(2),\n        totalGST: totalGST.toFixed(2),\n        totalPriceWGST : totalPriceWGST.toFixed(2)\n      });\n    } else {\n      this.setState({\n        [name]: value\n      });\n    }\n  };\n  handleInputChangeOtherCharges = event => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    if(value > 0) {\n      const totalPrice = parseFloat(this.state.totalPrice)+parseFloat(value);\n      const totalGST = totalPrice*0.03;\n      const totalPriceWGST = totalPrice + totalGST\n      this.setState({\n        [name]: value,\n        totalPrice: totalPrice.toFixed(2),\n        totalGST: totalGST.toFixed(2),\n        totalPriceWGST : totalPriceWGST.toFixed(2)\n      });\n    } else {\n      this.setState({\n        [name]: value\n      });\n    }\n  };\n  handleSubmit = event => {\n    this.setState({\n      goldPriceRt: 3750.0,\n      weight: '',\n      makingCharges: 450.0,\n      mcDiscountPrct: 0.0,\n      totalDiscount: 0.0,\n      totalMakingCharge: 0.0,\n      totalPrice: 0.0,\n      totalGoldPrice: 0.0,\n      totalGST:0.0,\n      totalPriceWGST:0.0,\n      totalOtherCharges:100\n    });\n  };\n  render() {\n    return (\n      <div>\n        <Container>\n          <Row>\n            <Col sm>\n              {/* <Form onSubmit={this.handleSubmit}> */}\n                <Form.Group controlId=\"formGroupGoldPrice\">\n                  <Form.Label>Gold Rate Per Gram</Form.Label>\n                  <Form.Control\n                    required\n                    type=\"number\"\n                    placeholder=\"Enter gold rate per gram\"\n                    name=\"goldPriceRt\"\n                    value={this.state.goldPriceRt}\n                    onChange={this.handleInputChange}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupMakingCharges\">\n                  <Form.Label>Making Charge (MC) Rate Per Gram</Form.Label>\n                  <Form.Control\n                    required\n                    type=\"number\"\n                    placeholder=\"Enter mobile number\"\n                    name=\"makingCharges\"\n                    value={this.state.makingCharges}\n                    onChange={this.handleInputChange}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupWeight\">\n                  <Form.Label>Other Charges (HM)</Form.Label>\n                  <Form.Control\n                    required\n                    type=\"number\"\n                    placeholder=\"Enter other charges\"\n                    name=\"totalOtherCharges\"\n                    value={this.state.totalOtherCharges}\n                    onChange={this.handleInputChange}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupWeight\">\n                  <Form.Label>Weight in Gram</Form.Label>\n                  <Form.Control\n                    required\n                    type=\"number\"\n                    placeholder=\"Enter weight in gram, e.g.; 1.98\"\n                    autoFocus\n                    name=\"weight\"\n                    value={this.state.weight}\n                    onChange={this.handleInputChangeWeight}\n                  />\n                  \n                </Form.Group>\n                \n                <Form.Group controlId=\"formGroupMakingCharges\">\n                  <Form.Label>Discount on MC (%)</Form.Label>\n                  <Form.Control\n                    required\n                    type=\"number\"\n                    placeholder=\"Enter discount\"\n                    name=\"mcDiscountPrct\"\n                    value={this.state.mcDiscountPrct}\n                    onChange={this.handleInputChange}\n                  />\n                  \n                </Form.Group>\n                <Form.Group controlId=\"formGroupMakingCharges\">\n                  <Form.Label>Total Gold Price ({this.state.goldPriceRt} X {this.state.weight})</Form.Label>\n                  <Form.Control\n                  readOnly\n                    required\n                    type=\"number\"\n                    placeholder=\"Enter discount\"\n                    name=\"totalGoldPrice\"\n                    value={this.state.totalGoldPrice}\n                    onChange={this.handleInputChange}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupMakingCharges\">\n                  <Form.Label>Making Charges ({this.state.makingCharges} X {this.state.weight})</Form.Label>\n                  <Form.Control\n                  readOnly\n                    required\n                    type=\"number\"\n                    placeholder=\"Enter discount\"\n                    name=\"totalMakingCharge\"\n                    value={this.state.totalMakingCharge}\n                    onChange={this.handleInputChange}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupMakingCharges\">\n                  <Form.Label>Discount on MC ({this.state.mcDiscountPrct} % on {this.state.totalMakingCharge})</Form.Label>\n                  <Form.Control\n                  readOnly\n                    required\n                    type=\"number\"\n                    placeholder=\"Enter discount\"\n                    name=\"totalDiscount\"\n                    value={this.state.totalDiscount}\n                    onChange={this.handleInputChange}\n                  />\n                  \n                </Form.Group>\n                <Form.Group controlId=\"formGroupMakingCharges\">\n                  <Form.Label>Total Price </Form.Label>\n                  <Form.Control\n                  readOnly\n                    required\n                    type=\"number\"\n                    placeholder=\"Enter discount\"\n                    name=\"totalPrice\"\n                    value={this.state.totalPrice}\n                    onChange={this.handleInputChange}\n                  />\n                  \n                </Form.Group>\n                <Form.Group controlId=\"formGroupMakingCharges\">\n                  <Form.Label>GST (3%)</Form.Label>\n                  <Form.Control\n                  readOnly\n                    required\n                    type=\"number\"\n                    placeholder=\"Enter discount\"\n                    name=\"totalGST\"\n                    value={this.state.totalGST}\n                    onChange={this.handleInputChange}\n                  />\n                  \n                </Form.Group>\n                <Form.Group controlId=\"formGroupMakingCharges\">\n                  <Form.Label>Total Price With GST</Form.Label>\n                  <Form.Control\n                  readOnly\n                    required\n                    type=\"number\"\n                    placeholder=\"Enter discount\"\n                    name=\"totalPriceWGST\"\n                    value={this.state.totalPriceWGST}\n                    onChange={this.handleInputChange}\n                  />\n                  \n                </Form.Group>\n                <div className=\"text-center\">\n                  <Button\n                    variant=\"primary\"\n                    type=\"submit\"\n                    className=\"font-weight-bold\"\n                    onClick={this.handleSubmit}\n                  >\n                    Reset\n                  </Button>\n                </div>\n              {/* </Form> */}\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\nexport default GoldPriceCalculator;\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nfunction Header() {\n  return (\n    <div className=\"text-white text-center\">\n      <Jumbotron fluid className=\"bg-info\">\n        <Container>\n          <h2>Gold Price Calculator</h2>\n          {/* <p>Tap on below options</p> */}\n        </Container>\n      </Jumbotron>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport GoldPriceCalculator from \"./components/gold-price-calculator\"\nimport Header from \"./components/header\"\nimport LiveRates from\"./components/live-rates\"\nfunction App() {\n  return (\n    <div>\n      <Header></Header>\n      <GoldPriceCalculator></GoldPriceCalculator>\n      {/* <LiveRates></LiveRates> */}\n    </div>\n  );\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\"\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}